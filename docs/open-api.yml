openapi: 3.0.0
info:
  title: Music Webstore API
  description: API for managing a music webstore
  version: 1.0.0
servers:
  - url: http://REPLACE_WITH_CORRECT_URL
tags:
  - name: products
  - name: users
  - name: orders
  - name: order_lines
  - name: reviews
  - name: genres
  - name: record_companies
  - name: artists
paths:
  /products:
    get:
      tags:
        - products
      summary: Get all products
      responses:
        '200':
          description:  Successfully got all the products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - products
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Successfully created the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Could not create a new product, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'

  /products/{id}:
    get:
      tags:
        - products
      summary: Get a specified product
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: The ID of the product to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: No product with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - products
      summary: Update a product
      description: Update an existing product. Any combination of fields may be provided.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: The ID of the product to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProduct'
      responses:
        '200':
          description: Successfully updated the specified product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Could not update the product, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No product with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - products
      summary: Delete a product
      description: Delete an existing product.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: The ID of the product to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: No product with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /users:
    get:
      tags:
        - users
      summary: Get all users
      responses:
        '200':
          description:  Successfully got all the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Successfully created the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Could not create a new user, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get a specified user
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - users
      summary: Update a user
      description: Update an existing user. Any combination of fields may be provided.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Successfully updated the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Could not update the user, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete an existing user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /users/{userId}/currentOrder:
    get:
      tags:
        - orders
      summary: Get current (open) order
      parameters:
        - name: userId
          in: path
          description: The ID of the user to get the order for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  Successfully got the current order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '400':
          description: User has no open order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
  /users/{userId}/currentOrder/checkout:
    put:
      tags:
        - orders
      summary: Checkout current (open) order
      parameters:
        - name: userId
          in: path
          description: The ID of the user to checkout the order for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  Successfully checked-out the current order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '400':
          description: User has no open order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
  /users/{userId}/orders:
    get:
      tags:
        - orders
      summary: Get all orders
      parameters:
        - name: userId
          in: path
          description: The ID of the user to get all the orders for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  Successfully got all the orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    post:
      tags:
        - orders
      summary: Create a new order
      parameters:
        - name: userId
          in: path
          description: The ID of the user to create an order for
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Successfully created the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Could not create a new order, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /users/{userId}/orders/{id}:
    get:
      tags:
        - orders
      summary: Get a specified order
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: The ID of the order to get
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to get an order for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No order or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - orders
      summary: Update an order
      description: Update an existing order. Any combination of fields may be provided.
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: The ID of the order to update
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to update an order for
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrder'
      responses:
        '200':
          description: Successfully updated the specified order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Could not update the order, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No order or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - orders
      summary: Delete an order
      description: Delete an existing order.
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: The ID of the order to delete
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to delete an order for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No order or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /orders/{orderId}/products/{productId}/orderlines:
    get:
      tags:
        - order_lines
      summary: Get all order lines
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  Successfully got all the order lines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderLine'
        '404':
          description: No order or product with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    post:
      tags:
        - order_lines
      summary: Create a new order line
      parameters:
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderLine'
      responses:
        '201':
          description: Successfully created the order line
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLine'
        '400':
          description: Could not create a new order line, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No order or product with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /orders/{orderId}/products/{productId}/order_lines/{id}:
    get:
      tags:
        - order_lines
      summary: Get a specified order line
      operationId: getOrderLine
      parameters:
        - name: id
          in: path
          description: The ID of the order line to get
          required: true
          schema:
            type: integer
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified order line
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLine'
        '404':
          description: No order, product or order line with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - order_lines
      summary: Update an order line
      description: Update an existing order line. Any combination of fields may be provided.
      operationId: updateOrderLine
      parameters:
        - name: id
          in: path
          description: The ID of the order line to update
          required: true
          schema:
            type: integer
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderLine'
      responses:
        '200':
          description: Successfully updated the specified order line
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLine'
        '400':
          description: Could not update the order line, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No order, product or order line with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - order_lines
      summary: Delete an order line
      description: Delete an existing order line.
      operationId: deleteOrderLine
      parameters:
        - name: id
          in: path
          description: The ID of the order line to delete
          required: true
          schema:
            type: integer
        - name: orderId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Successfully deleted the specified order line
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLine'
        '404':
          description: No order, product or order line with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /products/{productId}/users/{userId}/reviews:
    get:
      tags:
        - reviews
      summary: Get all reviews
      parameters:
        - name: productId
          in: path
          description: The ID of the product to get all the reviews for
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to get all the reviews for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  Successfully got all the reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: No product or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

    post:
      tags:
        - reviews
      summary: Create a new review
      parameters:
        - name: productId
          in: path
          description: The ID of the product to get all the reviews for
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to create an review for
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReview'
      responses:
        '201':
          description: Successfully created the review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Could not create a new review, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No product or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /products/{productId}/users/{userId}/reviews/{id}:
    get:
      tags:
        - reviews
      summary: Get a specified review
      operationId: getReview
      parameters:
        - name: id
          in: path
          description: The ID of the review to get
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product to get all the reviews for
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to get an review for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: No review, product or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - reviews
      summary: Update an review
      description: Update an existing review. Any combination of fields may be provided.
      operationId: updateReview
      parameters:
        - name: id
          in: path
          description: The ID of the review to update
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product to get all the reviews for
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to update an review for
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReview'
      responses:
        '200':
          description: Successfully updated the specified review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Could not update the review, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No review, product or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - reviews
      summary: Delete an review
      description: Delete an existing review.
      operationId: deleteReview
      parameters:
        - name: id
          in: path
          description: The ID of the review to delete
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product to get all the reviews for
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          description: The ID of the user to delete an review for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: No review, product or user with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /genres:
    get:
      tags:
        - genres
      summary: Get all genres
      responses:
        '200':
          description:  Successfully got all the genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
    post:
      tags:
        - genres
      summary: Create a new genre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGenre'
      responses:
        '201':
          description: Successfully created the genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Could not create a new genre, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'

  /genres/{id}:
    get:
      tags:
        - genres
      summary: Get a specified genre
      operationId: getGenre
      parameters:
        - name: id
          in: path
          description: The ID of the genre to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: No genre with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - genres
      summary: Update a genre
      description: Update an existing genre. Any combination of fields may be provided.
      operationId: updateGenre
      parameters:
        - name: id
          in: path
          description: The ID of the genre to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGenre'
      responses:
        '200':
          description: Successfully updated the specified genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Could not update the genre, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No genre with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - genres
      summary: Delete a genre
      description: Delete an existing genre.
      operationId: deleteGenre
      parameters:
        - name: id
          in: path
          description: The ID of the genre to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: No genre with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /record_companies:
    get:
      tags:
        - record_companies
      summary: Get all record companies
      responses:
        '200':
          description:  Successfully got all the record companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordCompany'
    post:
      tags:
        - record_companies
      summary: Create a new record company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecordCompany'
      responses:
        '201':
          description: Successfully created the record company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordCompany'
        '400':
          description: Could not create a new record company, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'

  /record_companies/{id}:
    get:
      tags:
        - record_companies
      summary: Get a specified record company
      operationId: getRecordCompany
      parameters:
        - name: id
          in: path
          description: The ID of the record company to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified record company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordCompany'
        '404':
          description: No record company with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - record_companies
      summary: Update a record company
      description: Update an existing record company. Any combination of fields may be provided.
      operationId: updateRecordCompany
      parameters:
        - name: id
          in: path
          description: The ID of the record company to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecordCompany'
      responses:
        '200':
          description: Successfully updated the specified record company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordCompany'
        '400':
          description: Could not update the record company, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No record company with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - record_companies
      summary: Delete a record company
      description: Delete an existing record company.
      operationId: deleteRecordCompany
      parameters:
        - name: id
          in: path
          description: The ID of the record company to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified record company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordCompany'
        '404':
          description: No record company with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /artists:
    get:
      tags:
        - artists
      summary: Get all artists
      responses:
        '200':
          description:  Successfully got all the artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - artists
      summary: Create a new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtist'
      responses:
        '201':
          description: Successfully created the artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Could not create a new artist, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'

  /artists/{id}:
    get:
      tags:
        - artists
      summary: Get a specified artist
      operationId: getArtist
      parameters:
        - name: id
          in: path
          description: The ID of the artist to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully got the specified artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '404':
          description: No artist with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags:
        - artists
      summary: Update an artist
      description: Update an existing artist. Any combination of fields may be provided.
      operationId: updateArtist
      parameters:
        - name: id
          in: path
          description: The ID of the artist to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtist'
      responses:
        '200':
          description: Successfully updated the specified artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Could not update the artist, please check all fields are correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No artist with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - artists
      summary: Delete an artist
      description: Delete an existing artist.
      operationId: deleteArtist
      parameters:
        - name: id
          in: path
          description: The ID of the artist to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '404':
          description: No artist with that ID found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the product
        title:
          type: string
          description: The title of the product
        artist:
          type: string
          description: The artist of the product
        recordCompany:
          type: string
          description: The record company of the product
        releaseYear:
          type: string
          description: The release year of the product
        price:
          type: number
          description: The price of the product
        genres:
          type: array
          items:
            type: string
          description: List of genres associated with the product
      required:
        - companyId
        - artistId
        - title
        - releaseYear
        - price
        - genres
    CreateProduct:
      type: object
      properties:
        title:
          type: string
          description: The title of the product
        artist:
          type: string
          description: The artist of the product
        recordCompany:
          type: string
          description: The record company of the product
        releaseYear:
          type: string
          description: The release year of the product
        price:
          type: number
          description: The price of the product
        genres:
          type: array
          items:
            type: string
          description: List of genres associated with the product
      required:
        - companyId
        - artistId
        - title
        - releaseYear
        - price
        - genres
    UpdateProduct:
      type: object
      properties:
        title:
          type: string
          description: The title of the product
        artist:
          type: string
          description: The artist of the product
        recordCompany:
          type: string
          description: The record company of the product
        releaseYear:
          type: string
          description: The release year of the product
        price:
          type: number
          description: The price of the product
        genres:
          type: array
          items:
            type: string
          description: List of genres associated with the product
    CreateUser:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        password:
          type: string
          description: The password of the user
        role:
          type: string
          oneOf:
            - title: ADMIN
            - title: USER
          description: The role of the user
      required:
        - name
        - email
        - password
        - role
    UpdateUser:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        password:
          type: string
          description: The password of the user
        role:
          type: string
          oneOf:
            - title: ADMIN
            - title: USER
          description: The role of the user
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the user
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        password:
          type: string
          description: The password of the user
        role:
          type: string
          oneOf:
            - title: ADMIN
            - title: USER
          description: The role of the user
      required:
        - name
        - email
        - password
        - role
    CreateOrder:
      type: object
      properties:
        date:
          type: string
          description: The date the order was placed
      required:
        - userId
        - date
    UpdateOrder:
      type: object
      properties:
        date:
          type: string
          description: The date the order was placed
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the order
        userId:
          type: integer
          description: The foreign key to the user who placed the order
        date:
          type: string
          description: The date the order was placed
      required:
        - userId
        - date
    CreateOrderLine:
      type: object
      properties:
        quantity:
          type: integer
          description: The quantity of the product in the order line
      required:
        - quantity
    UpdateOrderLine:
      type: object
      properties:
        quantity:
          type: integer
          description: The quantity of the product in the order line
    OrderLine:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the order line
        productId:
          type: integer
          description: The foreign key to the product in the order line
        orderId:
          type: integer
          description: The foreign key to the order to which the order line belongs
        quantity:
          type: integer
          description: The quantity of the product in the order line
      required:
        - productId
        - orderId
        - quantity
    CreateReview:
      type: object
      properties:
        content:
          type: integer
          description: The content of the review
      required:
        - productId
        - userId
        - content
    UpdateReview:
      type: object
      properties:
        content:
          type: integer
          description: The content of the review
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the review
        content:
          type: integer
          description: The content of the review
      required:
        - content
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
    CreateGenre:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    UpdateGenre:
      type: object
      properties:
        name:
          type: string
    RecordCompany:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
    CreateRecordCompany:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    UpdateRecordCompany:
      type: object
      properties:
        name:
          type: string
    Artist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        record_company_id:
          type: integer
          format: int64
      required:
        - name
        - record_company_id
    CreateArtist:
      type: object
      properties:
        name:
          type: string
        record_company_id:
          type: integer
          format: int64
      required:
        - name
        - record_company_id
    UpdateArtist:
      type: object
      properties:
        name:
          type: string
        record_company_id:
          type: integer
          format: int64
    Error400:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "bad request"
    Error404:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "not found"